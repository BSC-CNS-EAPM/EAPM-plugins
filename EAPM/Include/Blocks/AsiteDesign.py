"""
Module containing the Asitedesign block for the EAPM plugin
"""

from HorusAPI import PluginVariable, SlurmBlock, VariableTypes

# ==========================#
# Variable inputs
# ==========================#
inputYamlAsite = PluginVariable(
    name="Input yaml",
    id="input_yaml",
    description=" Path to the input file yaml.",
    type=VariableTypes.FILE,
    defaultValue=None,
    allowedValues=["yaml", "yml"],
)
inputPDBAsite = PluginVariable(
    name="Input PDB",
    id="input_pdb",
    description=" Path to the input file PDB.",
    type=VariableTypes.FILE,
    defaultValue=None,
    allowedValues=["pdb"],
)
inputParamsAsite = PluginVariable(
    name="Parameters",
    id="input_params",
    description=" Path to the input file parameters folder.",
    type=VariableTypes.FOLDER,
    defaultValue=None,
)


# ==========================#
# Variable outputs
# ==========================#
outputModelsAsite = PluginVariable(
    name="Models",
    id="models",
    description="The models generated by the simulation.",
    type=VariableTypes.FOLDER,
    defaultValue="job_final_pose",
)

##############################
#       Other variables      #
##############################
containerAsite = PluginVariable(
    name="Container",
    id="container",
    description="If you are launching the block in a container. The container to use.",
    type=VariableTypes.FILE,
    defaultValue=None,
)
outputFolderAsite = PluginVariable(
    name="Asite simulation folder",
    id="folder_name",
    description="The name of the folder where the simulation will be stored.",
    type=VariableTypes.STRING,
    defaultValue="AsiteDesign",
)
removeExistingResults = PluginVariable(
    name="Remove existing results",
    id="remove_existing_results",
    description="Remove existing results",
    type=VariableTypes.BOOLEAN,
    defaultValue=False,
)


def initialAsite(block: SlurmBlock):
    import os
    import subprocess

    # Get the input variables
    input_yaml = block.inputs.get(inputYamlAsite.id, None)
    input_params = block.inputs.get(inputParamsAsite.id, None)
    input_pdb = block.inputs.get(inputPDBAsite.id, None)
    container = block.variables.get("container", None)
    output_file = input_yaml.rstrip(".yaml").split("/")[-1] + ".out"
    cpus = block.variables.get("cpus_per_task", 1)

    cwd = os.getcwd()

    if not os.path.exists(input_yaml):
        raise Exception(f"Input yaml file {input_yaml} not found")
    if not os.path.exists(input_params):
        raise Exception(f"Input parameters folder {input_params} not found")
    if not os.path.exists(input_pdb):
        raise Exception(f"Input pdb file {input_pdb} not found")

    # removeExisting = block.variables.get("remove_existing_results", False)

    # if removeExisting and os.path.exists(folder_name):
    #     os.system("rm -rf " + folder_name)

    # if not removeExisting and os.path.exists(folder_name):
    #     raise Exception(
    #         "The folder {} already exists. Please, choose another name or remove it.".format(
    #             folder_name
    #         )
    #     )

    # os.makedirs(folder_name, exist_ok=True)

    # # copiar pdb and params to output folder
    # subprocess.run(["cp", input_yaml, os.path.join(os.getcwd(), folder_name)], check=True)
    # subprocess.run(["cp", input_pdb, os.path.join(os.getcwd(), folder_name)], check=True)
    # subprocess.run(["cp", "-r", input_params, os.path.join(os.getcwd(), folder_name)], check=True)

    # input_yaml = folder_name + "/" + os.path.basename(input_yaml)
    # input_pdb = folder_name + "/" + os.path.basename(input_pdb)
    # input_params = folder_name + "/" + os.path.basename(input_params)

    input_yaml = os.path.basename(input_yaml)

    cluster = "local"
    if block.remote.name != "local":
        cluster = block.remote.host

    if "login" in cluster:
        job = f"mpirun -n {cpus} python -m ActiveSiteDesign {input_yaml} > {output_file}"
    elif cluster == "local":
        if container is None:
            job = f"mpirun -n {cpus} python -m ActiveSiteDesign {input_yaml} > {output_file}"
        else:
            if cpus == 0:
                job = f"singularity exec {container} python -m ActiveSiteDesign {input_yaml} > {output_file}"
            else:
                job = f"mpirun -n {cpus} singularity exec {container} python -m ActiveSiteDesign {input_yaml} > {output_file}"
    else:
        raise Exception("AsiteDesign can only be run on nord3 or local")

    from utils import launchCalculationAction

    launchCalculationAction(
        block, [job], "asitedesign", modulePurge=True  # uploadFolders=folder_name,
    )


def finalAsiteAction(block: SlurmBlock):

    import os

    from utils import downloadResultsAction

    downloaded_path = downloadResultsAction(block)

    for f in os.listdir(downloaded_path):
        if f.endswith("_final_pose"):
            resultsFolder = f
            break

    block.setOutput(outputModelsAsite.id, os.path.join(downloaded_path, resultsFolder))


from utils import BSC_JOB_VARIABLES

asiteDesignBlock = SlurmBlock(
    name="AsiteDesign",
    id="AsiteDesign",
    description="Run AsiteDesign. (For local or nord3)",
    initialAction=initialAsite,
    finalAction=finalAsiteAction,
    variables=BSC_JOB_VARIABLES + [containerAsite, outputFolderAsite, removeExistingResults],
    inputs=[inputYamlAsite, inputPDBAsite, inputParamsAsite],
    outputs=[outputModelsAsite],
)
