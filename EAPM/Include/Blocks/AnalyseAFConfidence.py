from HorusAPI import PluginVariable, VariableTypes, PluginBlock
import os
import pandas as pd
import numpy as np
import json
import shutil
from glob import glob
from os.path import basename, join, dirname



input_AF = PluginVariable(
    name="AF folder",
    id="af_path",
    description="The folder containing the alpha_fold models",
    type=VariableTypes.FOLDER
)


confidence_threshold = PluginVariable(
    name="Confidence threshold",
    id="confidence_threshold",
    description="Selecting models with the mean pLtdd of all residues above this threshold",
    type=VariableTypes.FLOAT,
    defaultValue=90.0,
)


output_af = PluginVariable(
    name="Confident models folder",
    id="out_path",
    description="Output folder to keep the models that passed the confidence threshold",
    type=VariableTypes.FOLDER,
)


mean_plddt_file = PluginVariable(
    name="mean plddt",
    id="plddt_file",
    description="Output file with the mean plddt values per model in csv format",
    type=VariableTypes.FILE,
    defaultValue="mean_plddt.csv",
    allowedValues=["csv"],
)


plddt_json = PluginVariable(
    name="plddt json",
    id="plddt_json",
    description="Output file with all the plddt values per model in json format",
    type=VariableTypes.FILE,
    defaultValue="plddt.json",
    allowedValues=["json"],
)


def extract_quality(file: str):
    """
    Extract the plddt values from a pdb file

    Parameters
    ----------
    file : Union[str, Path]
        a pdb file

    Returns
    -------
    list
        a list of the plddt values of the pdb file
    """
    with open(file) as pdbf:
        pdb = pdbf.readlines()
    pdb = [x for x in pdb if x.startswith("ATOM")]
    pdb = [float(x[61:66]) for x in pdb]
    return pdb


def analyse_af_confidence(block: PluginBlock):
    """
    Analyse the confidence of the models generated by AlphaFold2 by looking at the plddt values
    
    Parameters
    ----------
    block : PluginBlock
        Contains the plugin functionality of Horus
    """

    input_af = block.inputs.get("af_path", "trimmed_models")
    threshold = block.variables.get("confidence_threshold", 90.0)
    mean_plddt_file = block.variables.get("plddt_file", "mean_plddt.csv")
    plddt_json = block.variables.get("plddt_json", "plddt.json")
    output_dir = join(os.getcwd(), "confident_models/models")
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    files = glob(f"{input_af}/*.pdb")
    plddt = {}
    mean_plddt = {}
    for file in files:
        name = basename(file).replace(".pdb", "")
        plddt[name] = extract_quality(file)
        mean_plddt[name] = np.mean(plddt[name])
        # copy the files that pass the threshold
        if mean_plddt[name] >= threshold:
            shutil.copyfile(file, join(output_dir, basename(file)))

    # save the mean pltdd and plddt values in csv and json format
    plddt_csv = pd.Series(mean_plddt)
    plddt_csv.to_csv(join(dirname(output_dir), mean_plddt_file))

    with open(join(dirname(output_dir), plddt_json), "w") as f:
        json.dump(plddt, f)

    block.setOutput("out_path", output_dir)


analyse_AF_confidence_block = PluginBlock(
    name="AF confidence analysis",
    description="Analyse the per residue pltdd of the AF models and copy those that passes a predefined threshold",
    action=analyse_af_confidence,
    variables=[confidence_threshold, mean_plddt_file, plddt_json],
    inputs=[input_AF],
    outputs=[output_af]
)